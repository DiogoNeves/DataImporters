# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/10_source_custom_fsd.ipynb (unless otherwise specified).


from __future__ import annotations


__all__ = ['CustomFsd']

# Cell

#nbdev_comment from __future__ import annotations

from .core import *

import os
import pandas as pd

# Internal Cell

def _clean_category_name(query):
    return query.replace("+", " ").split("&")[0]

# Internal Cell

def _category_renames(category: str) -> str:
    "Applies renaming rules to category names."
    rules = [
        ("ship_horn", "horn"),
        ("robot_movement", "robot"),
        ("zombie_noises", "zombie"),
        ("sword_hit", "sword")
    ]
    for old, new in rules:
        if category.lower() == old:
            return new
    return category

# Cell

class CustomFsd(Source):
    def preload(self, root_dir: str):
        # Load all metadata.csv files into a single dataframe.
        columns = ["id", "filename", "category", "tags"]
        samples_dir = os.path.join(root_dir, "samples")
        self.metadata = pd.concat([pd.read_csv(os.path.join(path, f), header=None, names=columns)
                                   for path, f in get_filenames(samples_dir, ".csv")])

    @property
    def name(self) -> str:
        return "custom_fsd"

    def get_files(self, root_dir: str) -> list[tuple[str, str]]:
        return get_audio_filenames(root_dir)

    def get_category(self, path: str, filename: str) -> str:
        return _category_renames(os.path.basename(path))

    def get_labels(self, path: str, filename: str) -> list[str]:
        tags = self.metadata.loc[self.metadata["filename"] == filename, "tags"].values[0]
        return tags.split(",")